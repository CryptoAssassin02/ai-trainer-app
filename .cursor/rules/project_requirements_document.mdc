---
description: 
globs: 
alwaysApply: true
---
# Project Requirements Document for trAlner AI Fitness App

## 1. Project Overview

trAlner is an all-in-one AI-driven fitness app that generates personalized workout plans and macro goals based on user demographics, fitness preferences, and progress data. The app implements an **agent-based architecture** that integrates cutting-edge AI models to search for exercise research, generate custom workout routines, and calculate tailored nutritional recommendations. Using modern technologies like Supabase for authentication and data storage, Perplexity AI for exercise research, and the OpenAI API for plan generation, trAlner fills the gap for fitness enthusiasts seeking a smart, adaptable solution that grows with their personal fitness journey.

We are building trAlner to simplify and enhance the fitness planning experience for users ranging from beginners to advanced athletes. The key objectives are to ensure secure authentication, provide a seamless user-friendly interface, and deliver workout and nutritional recommendations that adapt in real-time to evolving goals. Success will be measured by user engagement, the accuracy and personalization of the workout plans, and the ability to scale the platform for future measurements such as wearables integration and community features.

## 2. In-Scope vs. Out-of-Scope

### In-Scope:
- Secure user authentication and account management using Supabase Auth.
- Comprehensive user profile setup capturing demographics, fitness preferences, and goals (including options for imperial/metric units).
- Dynamic dashboard interface featuring key workout metrics, workout plan generation, logs, and progress tracking.
- AI-driven workout plan generation with a two-step integration using **agent-based architecture**:
  - **Research Agent** powered by Perplexity AI for exercise and research lookup.
  - **Workout Generation Agent** powered by OpenAI API for generating personalized workout routines with **visible reasoning steps**.
- **Plan Adjustment Agent** for hybrid workout plan review and editing, supporting both manual changes and AI-assisted modifications via natural language.
- **Nutrition Agent** for automatic macro calculation based on user demographics and activity levels with clear hooks for future nutritional tracking.
- Functionality to export and import workout plans in XLSX, PDF, CSV, and Google Sheets formats.
- Configurable notification system (mobile push, SMS, email, and in-app alerts) based on user choice.
- **Agent memory systems** for storing user data, progress, and feedback for improved personalization over time.
- Secure data storage separating user-specific data in Supabase from anonymized records in a general memory bank.
- **Basic Analytics & Usage Tracking**: The system will gather aggregated usage statistics (e.g., how often users generate workout plans, log workouts, or navigate key screens), provided the user consents. This data will help the team understand usage patterns and improve the user experience. Additionally, the system will avoid storing sensitive or personally identifiable information in analytics logs.

### Out-of-Scope:
- Advanced nutritional tracking integrations (beyond basic macro calculation) beyond using MyFitnessPal as an alternative.
- Integration of wearables or health tracking devices in the initial release.
- Community features such as user forums, group workouts, or social sharing.
- Multi-language support and advanced gamification elements for this version.
- Complex roles and permissions (only a single user type is supported for now).

## 3. User Flow

A new user lands on a sleek, modern landing page that showcases the app's dark mode default with vibrant electric blue accents. They are prompted to sign up by entering their name, email, and password, with all data securely handled via Supabase Auth. After signing up, the user is guided through an easy-to-follow onboarding process that includes filling out detailed profile information---covering demographics (height, weight, age, gender, disabilities), fitness preferences (exercise types, equipment, workout frequency), and specific fitness goals. Once the profile is complete, the user is taken to a dynamic dashboard where key metrics like upcoming workouts, workout logs, and macro progress are clearly displayed.

For returning users, the login flow is simple and secure. On the dashboard, users can choose to generate a workout plan by clicking a dedicated button. This triggers a two-step AI integration using our **agent-based architecture**: first, the **Research Agent** powered by Perplexity AI fetches exercise research from reputable sources, and then the **Workout Generation Agent** powered by OpenAI API combines these insights with the user's data to craft a personalized workout regimen with **reasoning steps visible to the user**. Once generated, the workout plan appears on the dashboard, where users can review, manually edit, or use natural language inputs to ask the **Plan Adjustment Agent** for AI-driven improvements.

The **Agent Memory System** ensures that user preferences, feedback, and progress data are stored and retrieved to continuously improve the personalization of workout plans. Periodic bi-weekly check-ins remind users to log progress, and all new data updates the workout plans and macro calculations, ensuring the app stays in sync with evolving fitness goals through the agent's **reflection capabilities**.

## 4. Core Features

### User Authentication & Account Management:
- Secure signup and login using Supabase Auth.
- Logout functionality and account management capabilities.

### User Profile Setup & Personalization:
- Detailed profile input for demographics and fitness preferences.
- Options to choose unit systems (imperial/metric).
- Editable fields for personal details, workout style, and goals.

### Dynamic Dashboard:
- Consistent header/navbar with app branding and hamburger navigation.
- Tabs for home overview, workout plan generation, workout logs, and profile management.
- Use of charts and graphs for visualizing workout and macro progress.

### AI-Driven Workout Plan Generation with Agent-Based Architecture:
- **Research Agent** powered by Perplexity AI for exercise research.
- **Workout Generation Agent** powered by OpenAI API for personalized plan creation with visible reasoning steps.
- **Agent Memory System** for storing user preferences, feedback, and workout history to improve personalization.
- Detailed workout plans with exercise selection, technique notes, and scheduling.
- Storage of plans and versioning in Supabase along with non-personalized memory bank.

### Plan Review & Editing:
- Display of generated plan with options to accept or request edits.
- **Plan Adjustment Agent** for hybrid approach combining manual adjustments with AI-assisted natural language edits.
- Immediate updates and persistent saving of edits.
- Visualization of AI reasoning to help users understand plan modifications.

### Macro Goals & Nutritional Tracking:
- **Nutrition Agent** for automatic calculation of macros (BMR, adjustments based on activity).
- Dashboard display of nutritional goals.
- Basic macro calculator with hooks for future nutritional tracking enhancements.

### Progress & Check-in System:
- Bi-weekly and final check-ins for workout logging and progress analysis.
- Generation of personalized AI feedback reports using **agent reflection capabilities**.
- Storage of progress data with version history in the **Agent Memory System**.

### Export/Import Functionality:
- Options for exporting workout plans in XLSX, PDF, CSV formats and Google Sheets integration.
- Import feature with reliable parsing to integrate data back into the dashboard.

### Notification System:
- Customizable notification delivery (mobile push, email, SMS, in-app alerts) based on user preferences.
- Reminders for workout days, macro tracking, and progress logging.

#### 4.1 API Requirements and Constraints

To facilitate both human and AI-driven development, our RESTful API must adhere to these guidelines:

- **Versioning:** All endpoints will include a version prefix (e.g., `/v1/`). Changes that break backward compatibility will increment this version.
- **Endpoint Naming:**
  - Use plural nouns for collections (e.g., `/workouts`, `/users`) and path parameters for specific items (e.g., `/workouts/{planId}`).
  - Avoid verbs in paths; actions map to HTTP methods (GET, POST, PUT, PATCH, DELETE).
- **Error Handling:**
  - Return meaningful HTTP status codes (400 for invalid data, 401 for unauthorized, 404 for not found, 500 for internal server errors).
  - Respond with a JSON body that includes a descriptive `message` and an optional `errorCode`.
- **Security Considerations:**
  - Mitigate SSRF risks by validating or whitelisting any external URL requests that AI agents might initiate.
  - Rate limiting or throttling will apply to critical endpoints (e.g., plan generation) to avoid abuse.
- **Data Validation:**
  - Required fields must be checked for presence and type. If invalid, the API returns a 400 response with an explanatory message.
  - Larger, logic-based validations (e.g., contradictory workout goals) may also trigger a 400 or 422 status code.
- **Consistent Response Format:**
  - All successful responses include at minimum:
    ```json
    {
      "status": "success",
      "data": {},
      "message": "<optional descriptive message>"
    }
    ```
  - Errors have:
    ```json
    {
      "status": "error",
      "errorCode": "<string>",
      "message": "<description of what went wrong>"
    }
    ```

## 5. Tech Stack & Tools

### Frontend:
- React using the **CodeGuide Starter Pro kit** as the foundation.
- **V0 by Vercel** for component generation and UI building.
- **Cursor** for advanced code completion and AI assistance.
- Modern design principles with responsive styling and dark/light mode support.
- Tailwind CSS for utility-first styling with consistent dark mode theme.

### Backend:
- Node.js server environment.
- Supabase for authentication services and database storage.
- Vector storage capabilities for **Agent Memory System** implementation.

### AI & API Integrations:
- Perplexity AI for the **Research Agent** to gather exercise research and data.
- OpenAI API for the **Workout Generation Agent**, **Plan Adjustment Agent**, and **Nutrition Agent**.
- Implementation of **ReAct pattern** for reasoning and **reflection pattern** for plan adjustments.

### Development Tools:
- **Cursor**: Advanced IDE for real-time coding support, used for backend development and agent implementation.
- **V0 by Vercel**: For frontend component generation.
- **Bolt.new**: For generating auth implementations and API services.
- Integration with Git-based version control.
- Plugin integrations as needed for debugging and testing.

## 6. Non-Functional Requirements

### Performance:
- Ensure fast response times for authentication, page loads, and AI plan generation.
- Minimal latency when querying Supabase and integrating AI responses.
- **Agent operations optimization** to run efficiently without blocking the user interface.

### Security:
- Use end-to-end encryption for data in transit and at rest.
- Comply with GDPR, CCPA, and other relevant privacy regulations.
- Secure API keys and access tokens; audit and update security protocols on a regular schedule.
- **Agent access control** to ensure AI components only access specific data they need.

### Usability:
- Responsive and intuitive UI with dark and light mode capabilities.
- Clear visual feedback for user actions (e.g., form submissions, plan edits).
- **Agent reasoning visualization** to build user trust and understanding.
- Accessibility standards with high-contrast color schemes and adjustable text sizes.

### Reliability:
- Robust error handling for failed API calls or network interruptions.
- Automated backups for user data and version history in Supabase.
- **Agent performance monitoring** for tracking quality of AI-generated content.

## 7. Constraints & Assumptions

### Constraints:
- Dependency on third-party APIs (Supabase, Perplexity AI, OpenAI API) which must have high availability.
- Strict security and privacy requirements necessitate regular audits and updates.
- Performance can be impacted by API rate limits and network latency; proper error-handling and fallback mechanisms are needed.

### Assumptions:
- All users are anticipated to have similar roles (single user type), with potential for future role expansion.
- The provided UI/UX guidelines (dark mode default, electric blue accents, clean modern sans-serif fonts) will be adhered to across all screens.
- The **agent-based architecture** will support future integrations with wearables, nutritional tracking, and community features without major architectural changes.
- Users will prefer and choose notification methods based on their individual needs, and the system's flexibility in this regard is critical.
- The **Agent Memory System** will provide increasingly accurate personalization as users continue to interact with the app.

## 8. Known Issues & Potential Pitfalls

- **API Rate Limits:**
  - Third-party AI integrations (OpenAI and Perplexity AI) might have rate limits; caching and request throttling strategies should be implemented.
- **Data Privacy & Security:**
  - Ensuring compliance with all data protection regulations could require ongoing reviews and audits.
  - Proper encryption protocols must be maintained; a breach in security can lead to data loss or reputation harm.
- **Real-Time Updates:**
  - Handling dynamic updates to workout plans and macro calculations in real-time can be complex and requires efficient state management.
  - **Agent state management** needs to track the progress of AI operations and ensure a smooth user experience.
  - Testing for edge cases where user input changes rapidly (e.g., simultaneous edits) is essential.
- **Export/Import Parsing:**
  - File parsing for importing workout plans (especially from CSV or Google Sheets) can be error-prone.
  - Validation rules and clear error messages need to be implemented to guide users through the import process.
- **User Experience Consistency:**
  - Integrating multiple notification types while respecting user preferences can lead to inconsistencies if not properly managed.
  - Clear guidelines and test cases should be in place to ensure smooth transitions between manual and AI-assisted editing modes.
- **Agent behavior testing** is needed to ensure AI features produce consistent, high-quality results.

## 9. Legal Disclaimers

Because trAlner provides fitness and nutritional guidance, we will prominently include the following disclaimers throughout the user experience:

1. **Not Medical Advice**: "This app does not provide medical advice. The content is for informational purposes only and is not a substitute for professional medical guidance or diagnosis. Always consult a qualified health professional before beginning any exercise or nutrition program."
2. **User Responsibilities**: "Users are responsible for verifying that exercises and nutritional recommendations are safe given their medical history, injuries, or physical limitations."
3. **Liability Waiver**: The Terms of Service should contain a limitation of liability, indicating that trAlner is not liable for injuries or health complications resulting from following the app's recommendations.

These disclaimers must be acknowledged by each user during onboarding. The disclaimers also appear on the user's profile page and near the workout plan generation flow to comply with general health/fitness app norms.